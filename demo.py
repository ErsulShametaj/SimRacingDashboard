# Import all the modules
import dash
import dash_core_components as dcc
import dash_html_components as html
import pandas as pd
import plotly.express as px
import plotly.graph_objs as go
import dash_bootstrap_components as dbc
import dash_daq as daq

from scipy.signal import find_peaks
from dash.dependencies import Input, Output
from dash import dash_table

# Initiate the App

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])


# Read the files

dfCar = pd.read_csv('car (3).csv')
dfSpeed = dfCar.loc[:,"speed"]


dfCar = pd.read_csv('car26.csv')
dfLap = pd.read_csv('lap26.csv')
dfSession = pd.read_csv('session26.csv')
dfTyre = pd.read_csv('tyre26.csv')
dfInput = pd.read_csv('input26.csv')


# Create mother dataframe
exTimeStamp = dfLap["timestamp"]
exLapPos = dfLap["lap position"]
exLapCount = dfLap["lap count"]
exLastLap = dfLap["last lap"]
exBestLap = dfLap["best lap"]
exGas = dfInput["gas"]
exBrake = dfInput["brake"]
exSteer = dfInput["steer"]
exSpeed = dfCar["speed"]
extyre0 = dfTyre["slip angle0"]
extyre1 = dfTyre["slip angle1"]
extyre2 = dfTyre["slip angle2"]
extyre3 = dfTyre["slip angle3"]
temptyre0 = dfTyre["outer temp0"]
temptyre1 = dfTyre["outer temp1"]
temptyre2 = dfTyre["outer temp2"]
temptyre3 = dfTyre["outer temp3"]
exinvalid = dfLap["invalid"]
pressTyre0 = dfTyre["tyre pressure0"]
pressTyre1 = dfTyre["tyre pressure1"]
pressTyre2 = dfTyre["tyre pressure2"]
pressTyre3 = dfTyre["tyre pressure3"]
exbrakebias = dfCar["brake bias"]

dfOmega = pd.DataFrame()

dfOmega = dfOmega.assign(lapPosition = exLapPos)
dfOmega = dfOmega.assign(gas = exGas)
dfOmega = dfOmega.assign(breaks = exBrake)
dfOmega = dfOmega.assign(steer = exSteer)
dfOmega = dfOmega.assign(lapCount = exLapCount)
dfOmega = dfOmega.assign(lastLap = exLastLap)
dfOmega = dfOmega.assign(bestLap = exBestLap)
dfOmega = dfOmega.assign(timestamp = exTimeStamp)
dfOmega = dfOmega.assign(speed = exSpeed)
dfOmega = dfOmega.assign(tyre1 = extyre0)
dfOmega = dfOmega.assign(tyre2 = extyre1)
dfOmega = dfOmega.assign(tyre3 = extyre2)
dfOmega = dfOmega.assign(tyre4 = extyre3)
dfOmega = dfOmega.assign(tyretemp1 = temptyre0)
dfOmega = dfOmega.assign(tyretemp2 = temptyre1)
dfOmega = dfOmega.assign(tyretemp3 = temptyre2)
dfOmega = dfOmega.assign(tyretemp4 = temptyre3)
dfOmega = dfOmega.assign(invalid = exinvalid)
dfOmega = dfOmega.assign(tyrepress1 = pressTyre0)
dfOmega = dfOmega.assign(tyrepress2 = pressTyre1)
dfOmega = dfOmega.assign(tyrepress3 = pressTyre2)
dfOmega = dfOmega.assign(tyrepress4 = pressTyre3)
dfOmega = dfOmega.assign(brakeBias = exbrakebias)




sectionData = {'Sections': ['Stright Line 1','Corner 1', 'Stright Line 2','Corner 2','Stright Line 3','Corner 3','Stright Line 4','Corner 4','Stright Line 5','Corner 5','Stright Line 6','Corner 6','Stright Line 7','Corner 7','Stright Line 8','Corner 8','Stright Line 9','Corner 9','Stright Line 10'],
               'Your Time': [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
               'Optimal Time': [3 ,3.85 ,7.80 , 1.63 , 1.90 , 2.475 , 15.00 , 4.80 , 4.15 , 1.50 ,3.95 , 5.20 , 2.260 , 0.86 , 12.45 , 8.88 , 4.70 , 6.38 , 9.24]}

sectionData1 = {'Sections': ['Stright Line 1','Corner 1', 'Stright Line 2','Corner 2','Stright Line 3','Corner 3','Stright Line 4','Corner 4','Stright Line 5','Corner 5','Stright Line 6','Corner 6','Stright Line 7','Corner 7','Stright Line 8','Corner 8','Stright Line 9','Corner 9','Stright Line 10'],
               'Your Time': [1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
               'Best Time': [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}

dfSections = pd.DataFrame(sectionData)
dfSections1 = pd.DataFrame(sectionData1)

# print(dfSections)

dfSmooth = pd.DataFrame()
dfSmooth = dfSmooth.assign(Gas = exGas)
dfSmooth = dfSmooth.assign(Break = exBrake)
dfSmooth = dfSmooth.assign(Steer = exSteer)
dfSmooth = dfSmooth.assign(timestamp = exTimeStamp)

smoothGas = dfSmooth['Gas'].std()
smoothBreak = dfSmooth['Break'].std()
smoothSteer = dfSmooth['Steer'].std()

# print(smoothSteer)
# print(smoothBreak)
# print(smoothGas)

# Session Lap Table
dfSessLap = pd.DataFrame()
dfSessTime = pd.DataFrame()
dfSessInfo = pd.DataFrame()

dfSessLap = dfSessLap.assign(Lap = exLapCount)
dfSessTime = dfSessTime.assign(LapTime = exLastLap)

dfSessLap = dfSessLap.Lap.drop_duplicates()
dfSessLap = dfSessLap.reset_index(drop=True)
dfSessLap = dfSessLap.drop(18)
# exLaps = dfSessLap["Lap"]

dfSessTime = dfSessTime.LapTime.drop_duplicates()
dfSessTime = dfSessTime.reset_index(drop=True)
dfSessTime = dfSessTime.drop(0)
dfSessTime = dfSessTime.reset_index(drop=True)
# exLapTime = dfSessTime["LapTime"]

# dfSessInfo = dfSessInfo.assign(Lap = exLaps)
# dfSessInfo = dfSessInfo.assign(LapTime = exLapTime)
# df['Address'] = address

dfSessInfo['Laps'] = dfSessLap
dfSessInfo['LapTime'] = dfSessTime

# dfSessInfo= dfSessInfo['LapTime'].rank(ascending=True)
dfSessInfo = dfSessInfo.sort_values(by=['LapTime'], ascending=True)
dfSessInfo = dfSessInfo.reset_index(drop=True)

# print(dfSessInfo)
# for column in dfSessInfo['Lap Time']:

for idx, row in dfSessInfo.iterrows():
    a = row.LapTime
    aSeconds = (a/1000)/60
    aRemainder = (a/1000)%60
    # print(aRemainder)

    if(str(aRemainder)[1] == "." ):
        aTime = str(int(str(aSeconds)[0]))+ ":" + "0" + str(int(str(aRemainder)[0])) + ":" + str(int(str(a)[3])) + str(int(str(a)[4])) + str(int(str(a)[5]))
    else:
        aTime = str(int(str(aSeconds)[0])) + ":" + str(int(str(aRemainder)[0]))+ str(int(str(aRemainder)[1])) + ":" + str(int(str(a)[3])) + str(int(str(a)[4])) + str(int(str(a)[5]))

    dfSessInfo.at[idx,'LapTime'] = aTime

# print(dfSessInfo)
# print(dfSessTime)


# Find how many times car was out of bounds
# dfInvalid = dfOmega.loc[:,"invalid"]
dfInvalid = dfOmega['invalid'].value_counts()
dfInvalidCount = dfInvalid.iloc[1]
dfInvalidCount = int(dfInvalidCount/380)
# print(dfInvalidCount)

# Find Worst Lap time
wrstLap = max(list(set(exLastLap)))
worstLapTime = str(int(str(wrstLap)[0])) + ":" + str(int(str(wrstLap)[1]))+ str(int(str(wrstLap)[2])) + ":" + str(int(str(wrstLap)[3])) + str(int(str(wrstLap)[4])) + str(int(str(wrstLap)[5]))

worstLapSeconds =  (wrstLap/1000)/60
worstLapRemainder =  (wrstLap/1000)%60
worstLapMinutes = str(int(str(worstLapSeconds)[0])) + ":" + str(int(str(worstLapRemainder)[0]))+ str(int(str(worstLapRemainder)[1])) + ":" + str(int(str(wrstLap)[3])) + str(int(str(wrstLap)[4])) + str(int(str(wrstLap)[5]))


dfWorstLap = dfOmega.loc[dfOmega['lastLap'] == wrstLap]
dfWorstLap = dfWorstLap.reset_index(drop=True)

# Find Worst Lap 
worstLap = dfWorstLap.iloc[0]['lapCount']
worstLap = worstLap - 1

# Find the best lap time
bestLapList = list(set(exLastLap))
bestLapList.remove(min(bestLapList))
bstLap = min(list(set(bestLapList)))

# print(bstLap)

bestLapSeconds =  (bstLap/1000)/60
bestLapRemainder =  (bstLap/1000)%60
bestLapMinutes = str(int(str(bestLapSeconds)[0])) + ":" + str(int(str(bestLapRemainder)[0]))+ str(int(str(bestLapRemainder)[1])) + ":" + str(int(str(bstLap)[3])) + str(int(str(bstLap)[4])) + str(int(str(bstLap)[5]))
# print(worstLapMinutes)

bestLapTime = str(int(str(bstLap)[0])) + ":" + str(int(str(bstLap)[1]))+ str(int(str(bstLap)[2])) + ":" + str(int(str(bstLap)[3])) + str(int(str(bstLap)[4])) + str(int(str(bstLap)[5]))

dfBestLap = dfOmega.loc[dfOmega['lastLap'] == bstLap]
dfBestLap = dfBestLap.reset_index(drop=True)

# Find the best Lap
bestLap = dfBestLap.iloc[0]['lapCount']
bestLap = bestLap - 1

# Find most improved lap time
length = len(bestLapList)
dmax = 0
laptime = 0

for i in range(length - 1):        
        if (bestLapList[i + 1] - bestLapList[i] > dmax):
            dmax = bestLapList[i + 1] - bestLapList[i]
            laptime = bestLapList[i]


dfMostImprovedLap = dfOmega.loc[dfOmega['lastLap'] == laptime]
dfMostImprovedLap = dfMostImprovedLap.reset_index(drop=True)

mostImproved = dfMostImprovedLap.iloc[0]['lapCount']
mostImproved = mostImproved - 1

mostImprovedSeconds =  (dmax/1000)/60
mostImprovedRemainder =  (dmax/1000)%60

mostImprovedMinutes = ""


if str(int(str(mostImprovedSeconds)[0])) == "0" :

    mostImprovedMinutes = "0:" + str(int(str(dmax)[0])) +  str(int(str(dmax)[1])) + ":" +str(int(str(dmax)[2])) + str(int(str(dmax)[3])) + str(int(str(dmax)[4]))

else:
    mostImprovedMinutes = str(int(str(mostImprovedSeconds)[0])) + ":" + str(int(str(mostImprovedRemainder)[0]))+ str(int(str(mostImprovedRemainder)[1])) + ":" + str(int(str(dmax)[3])) + str(int(str(dmax)[4])) + str(int(str(dmax)[5]))



# Find average lap time
averageLap = int(sum(list(set(exLastLap)))/len(list(set(exLastLap))))

averageLapSeconds =  (averageLap/1000)/60
averageLapRemainder =  (averageLap/1000)%60

# print(averageLap)
averageLapFixed = str(int(str(averageLapSeconds)[0])) + ":" + str(int(str(averageLapRemainder)[0]))+ str(int(str(averageLapRemainder)[1])) + ":" + str(int(str(averageLap)[3])) + str(int(str(averageLap)[4])) + str(int(str(averageLap)[5]))
# print(averageLap)

# Compare your time to best time
# yourtime = dfOmega.iloc[100000]['lastLap']

# timeCalc = yourtime - 101252
# timePercentageDiff = timeCalc/163
# yourCalcTime = 100 - timePercentageDiff

# Calculate Laps 
noLaps = list(set(exLapCount))
# print (noLaps)

# Determine Map Name
mapName = dfSession.iloc[0]['track']
# print(dfSession)

# Calculate number of Laps
numberLaps = len(noLaps)
# print(numberLaps)

# Determine if DRS is enabled or not
drsValue = dfCar.iloc[0]['drs enabled']
drsBool = ""

if drsValue == 0 :
    drsBool = "Not Enabled"
elif drsValue == 1 :
    drsBool = "Enabled"

# Calculate Brake Bias
brakeValues = list(set(exbrakebias))
brakeValue = brakeValues[1]
brakeValueStr = str(brakeValue)
brakeBiasFinal = brakeValueStr[2] + brakeValueStr[3] + "%" 


# print(yourCalcTime)
# noLaps = list(set(exLapCount))
# dfGasAll = dfInput.loc[:,"gas"]
# dfGas = dfGasAll.iloc[130691:137582]
# dfTimeAll = dfInput.loc[:,"timestamp"]
# dfTime = dfTimeAll.iloc[130691:137582]
# dfBrakeAll = dfInput.loc[:,"brake"]
# dfBrake = dfBrakeAll.iloc[130691:137582]
# dfSteerAll = dfInput.loc[:,"steer"]
# dfSteer = dfSteerAll.iloc[130691:137582]
# dfLap = pd.read_csv('lap26.csv')
# dfBestLap0 = dfLap.iloc[138900]['best lap']
# dfBestLap = str(int(str(dfBestLap0)[0])) + ":" + str(int(str(dfBestLap0)[1]))+ str(int(str(dfBestLap0)[2])) + ":" + str(int(str(dfBestLap0)[3])) + str(int(str(dfBestLap0)[4])) + str(int(str(dfBestLap0)[5]))
# figGas = go.Figure(data=[go.Scatter(x=dfTime, y=dfGas)])
# figBrake = go.Figure(data=[go.Scatter(x=dfTime, y=dfBrake)])
# figSteer = go.Figure(data=[go.Scatter(x=dfTime, y=dfSteer)])
# figGas1 = px.line(dfOmega, x="timestamp", y="gas")
# # Build the components

# Find How many times he was over the optimal time * margin

dfIrregularities = dfOmega

# dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]


#         dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
#         dfTableSL1 = dfTableSL1.reset_index(drop=True)

#         dffSections[0]['Your Time'] = 3

# print(noLaps)
overTimeC1 = 0
overTimeSL2 = 0
overTimeC2 = 0
overTimeSL3 = 0
overTimeC3 = 0
overTimeSL4 = 0
overTimeC4 = 0
overTimeSL5 = 0
overTimeC5 = 0
overTimeSL6 = 0
overTimeC6 = 0
overTimeSL7 = 0
overTimeC7 = 0
overTimeSL8 = 0
overTimeC8 = 0
overTimeSL9 = 0
overTimeC9 = 0
overTimeSL10 = 0

sectionMarginC1 = 0
sectionMarginSL2 = 0
sectionMarginC2 = 0
sectionMarginSL3 = 0
sectionMarginC3 = 0
sectionMarginSL4 = 0
sectionMarginC4 = 0
sectionMarginSL5 = 0
sectionMarginC5 = 0
sectionMarginSL6 = 0
sectionMarginC6 = 0
sectionMarginSL7 = 0 
sectionMarginC7 = 0
sectionMarginSL8 = 0
sectionMarginC8 = 0
sectionMarginSL9 = 0
sectionMarginC9 = 0
sectionMarginSL10 = 0



noLapsPop = noLaps[:-1]
# print(noLapsPop)

for x in noLapsPop:

    # print(x)
    dfIrregularities = dfIrregularities.loc[dfIrregularities['lapCount'] == x ]
    # print(dfIrregularities)
    

    dfIrregularitiesC1 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.053934) & (dfIrregularities['lapPosition'] <= 0.099476)]
    dfIrregularitiesC1 = dfIrregularitiesC1.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregC1 = dfIrregularitiesC1['timestamp'].iloc[0]
    exitValueIrregC1 = dfIrregularitiesC1['timestamp'].iloc[-1]
    timespentIrregC1 = exitValueIrregC1 - enterValueIrregC1

    # print(timespentIrregC1)

    sectionMarginC1 = (0.10 * 3.85) + 3.85
    

    if ((timespentIrregC1/1000 ) > sectionMarginC1):
         overTimeC1 = overTimeC1 + 1

########################################################################################################################################
    
    dfIrregularitiesSL2 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.099557) & (dfIrregularities['lapPosition'] <= 0.165263)]
    dfIrregularitiesSL2 = dfIrregularitiesSL2.reset_index(drop=True)
    
    # print(x)
    # print(dfIrregularitiesSL2)

    enterValueIrregSL2 = dfIrregularitiesSL2['timestamp'].iloc[0]
    exitValueIrregSL2 = dfIrregularitiesSL2['timestamp'].iloc[-1]
    timespentIrregSL2 = exitValueIrregSL2 - enterValueIrregSL2

    # print(timespentIrregC1)

    sectionMarginSL2 = (0.10 * 7.8) + 7.8
    

    if ((timespentIrregSL2/1000 ) > sectionMarginSL2):
         overTimeSL2 = overTimeSL2 + 1

########################################################################################################################################
    dfIrregularitiesC2 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.165264) & (dfIrregularities['lapPosition'] <= 0.181269)]
    dfIrregularitiesC2 = dfIrregularitiesC2.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregC2 = dfIrregularitiesC2['timestamp'].iloc[0]
    exitValueIrregC2 = dfIrregularitiesC2['timestamp'].iloc[-1]
    timespentIrregC2 = exitValueIrregC2 - enterValueIrregC2

    # print(timespentIrregC1)

    sectionMarginC2 = (0.10 * 1.63) + 1.63
    

    if ((timespentIrregC2/1000 ) > sectionMarginC2):
         overTimeC2 = overTimeC2 + 1

########################################################################################################################################
    dfIrregularitiesSL3 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.181424) & (dfIrregularities['lapPosition'] <= 0.197899)]
    dfIrregularitiesSL3 = dfIrregularitiesSL3.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregSL3 = dfIrregularitiesSL3['timestamp'].iloc[0]
    exitValueIrregSL3 = dfIrregularitiesSL3['timestamp'].iloc[-1]
    timespentIrregSL3 = exitValueIrregSL3 - enterValueIrregSL3

    # print(timespentIrregC1)

    sectionMarginSL3 = (0.10 * 1.9) + 1.9
    

    if ((timespentIrregSL3/1000 ) > sectionMarginSL3):
         overTimeSL3 = overTimeSL3 + 1

########################################################################################################################################
    dfIrregularitiesC3 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.19798) & (dfIrregularities['lapPosition'] <= 0.215193)]
    dfIrregularitiesC3 = dfIrregularitiesC3.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregC3 = dfIrregularitiesC3['timestamp'].iloc[0]
    exitValueIrregC3 = dfIrregularitiesC3['timestamp'].iloc[-1]
    timespentIrregC3 = exitValueIrregC3 - enterValueIrregC3

    # print(timespentIrregC1)

    sectionMarginC3 = (0.10 * 2.475) + 2.475
    

    if ((timespentIrregC3/1000 ) > sectionMarginC3):
         overTimeC3 = overTimeC3 + 1

########################################################################################################################################

    dfIrregularitiesSL4 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.215288) & (dfIrregularities['lapPosition'] <= 0.374019)]
    dfIrregularitiesSL4 = dfIrregularitiesSL4.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregSL4 = dfIrregularitiesSL4['timestamp'].iloc[0]
    exitValueIrregSL4 = dfIrregularitiesSL4['timestamp'].iloc[-1]
    timespentIrregSL4 = exitValueIrregSL4 - enterValueIrregSL4

    # print(timespentIrregC1)

    sectionMarginSL4 = (0.10 * 15) + 15
    

    if ((timespentIrregSL4/1000 ) > sectionMarginSL4):
         overTimeSL4 = overTimeSL4 + 1

########################################################################################################################################

    dfIrregularitiesC4 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.374277) & (dfIrregularities['lapPosition'] <= 0.430125)]
    dfIrregularitiesC4 = dfIrregularitiesC4.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregC4 = dfIrregularitiesC4['timestamp'].iloc[0]
    exitValueIrregC4 = dfIrregularitiesC4['timestamp'].iloc[-1]
    timespentIrregC4 = exitValueIrregC4 - enterValueIrregC4

    # print(timespentIrregC1)

    sectionMarginC4 = (0.10 * 4.8) + 4.8
    

    if ((timespentIrregC4/1000 ) > sectionMarginC4):
         overTimeC4 = overTimeC4 + 1

########################################################################################################################################

    dfIrregularitiesSL5 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.430126) & (dfIrregularities['lapPosition'] <= 0.476735)]
    dfIrregularitiesSL5 = dfIrregularitiesSL5.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregSL5 = dfIrregularitiesSL5['timestamp'].iloc[0]
    exitValueIrregSL5 = dfIrregularitiesSL5['timestamp'].iloc[-1]
    timespentIrregSL5 = exitValueIrregSL5 - enterValueIrregSL5

    # print(timespentIrregC1)

    sectionMarginSL5 = (0.10 * 4.15) + 4.15
    

    if ((timespentIrregSL5/1000 ) > sectionMarginSL5):
         overTimeSL5 = overTimeSL5 + 1

########################################################################################################################################

    dfIrregularitiesC5 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.476736) & (dfIrregularities['lapPosition'] <= 0.493043)]
    dfIrregularitiesC5 = dfIrregularitiesC5.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregC5 = dfIrregularitiesC5['timestamp'].iloc[0]
    exitValueIrregC5 = dfIrregularitiesC5['timestamp'].iloc[-1]
    timespentIrregC5 = exitValueIrregC5 - enterValueIrregC5

    # print(timespentIrregC1)

    sectionMarginC5 = (0.10 * 1.5) + 1.5
    

    if ((timespentIrregC5/1000 ) > sectionMarginC5):
         overTimeC5 = overTimeC5 + 1

########################################################################################################################################

    dfIrregularitiesSL6 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.493161) & (dfIrregularities['lapPosition'] <= 0.531574)]
    dfIrregularitiesSL6 = dfIrregularitiesSL6.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregSL6 = dfIrregularitiesSL6['timestamp'].iloc[0]
    exitValueIrregSL6 = dfIrregularitiesSL6['timestamp'].iloc[-1]
    timespentIrregSL6 = exitValueIrregSL6 - enterValueIrregSL6

    # print(timespentIrregC1)

    sectionMarginSL6 = (0.10 * 3.95) + 3.95
    

    if ((timespentIrregSL6/1000 ) > sectionMarginSL6):
         overTimeSL6 = overTimeSL6 + 1

########################################################################################################################################

    dfIrregularitiesC6 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.531771) & (dfIrregularities['lapPosition'] <= 0.568971)]
    dfIrregularitiesC6 = dfIrregularitiesC6.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregC6 = dfIrregularitiesC6['timestamp'].iloc[0]
    exitValueIrregC6 = dfIrregularitiesC6['timestamp'].iloc[-1]
    timespentIrregC6 = exitValueIrregC6 - enterValueIrregC6

    # print(timespentIrregC1)

    sectionMarginC6 = (0.10 * 5.2) + 5.2
    

    if ((timespentIrregC6/1000 ) > sectionMarginC6):
         overTimeC6 = overTimeC6 + 1

########################################################################################################################################

    dfIrregularitiesSL7 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.568972) & (dfIrregularities['lapPosition'] <= 0.588932)]
    dfIrregularitiesSL7 = dfIrregularitiesSL7.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregSL7 = dfIrregularitiesSL7['timestamp'].iloc[0]
    exitValueIrregSL7 = dfIrregularitiesSL7['timestamp'].iloc[-1]
    timespentIrregSL7 = exitValueIrregSL7 - enterValueIrregSL7

    # print(timespentIrregC1)

    sectionMarginSL7 = (0.10 * 2.26) + 2.26
    

    if ((timespentIrregSL7/1000 ) > sectionMarginSL7):
         overTimeSL7 = overTimeSL7 + 1

########################################################################################################################################

    dfIrregularitiesC7 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.589097) & (dfIrregularities['lapPosition'] <= 0.596377)]
    dfIrregularitiesC7 = dfIrregularitiesC7.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregC7 = dfIrregularitiesC7['timestamp'].iloc[0]
    exitValueIrregC7 = dfIrregularitiesC7['timestamp'].iloc[-1]
    timespentIrregC7 = exitValueIrregC7 - enterValueIrregC7

    # print(timespentIrregC1)

    sectionMarginC7 = (0.10 * 0.86) + 0.86
    

    if ((timespentIrregC7/1000 ) > sectionMarginC7):
         overTimeC7 = overTimeC7 + 1

########################################################################################################################################

    dfIrregularitiesSL8 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.59651) & (dfIrregularities['lapPosition'] <= 0.713457)]
    dfIrregularitiesSL8 = dfIrregularitiesSL8.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregSL8 = dfIrregularitiesSL8['timestamp'].iloc[0]
    exitValueIrregSL8 = dfIrregularitiesSL8['timestamp'].iloc[-1]
    timespentIrregSL8 = exitValueIrregSL8 - enterValueIrregSL8

    # print(timespentIrregC1)

    sectionMarginSL8 = (0.10 * 12.45) + 12.45
    

    if ((timespentIrregSL8/1000 ) > sectionMarginSL8):
         overTimeSL8 = overTimeSL8 + 1

########################################################################################################################################

    dfIrregularitiesC8 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.713617) & (dfIrregularities['lapPosition'] <= 0.777000)]
    dfIrregularitiesC8 = dfIrregularitiesC8.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregC8 = dfIrregularitiesC8['timestamp'].iloc[0]
    exitValueIrregC8 = dfIrregularitiesC8['timestamp'].iloc[-1]
    timespentIrregC8 = exitValueIrregC8 - enterValueIrregC8

    # print(timespentIrregC1)

    sectionMarginC8 = (0.10 * 8.88) + 8.88
    

    if ((timespentIrregC8/1000 ) > sectionMarginC8):
         overTimeC8 = overTimeC8 + 1

########################################################################################################################################

    dfIrregularitiesSL9 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.777001) & (dfIrregularities['lapPosition'] <= 0.82126)]
    dfIrregularitiesSL9 = dfIrregularitiesSL9.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregSL9 = dfIrregularitiesSL9['timestamp'].iloc[0]
    exitValueIrregSL9 = dfIrregularitiesSL9['timestamp'].iloc[-1]
    timespentIrregSL9 = exitValueIrregSL9 - enterValueIrregSL9

    # print(timespentIrregC1)

    sectionMarginSL9 = (0.10 * 4.7) + 4.7
    

    if ((timespentIrregSL9/1000 ) > sectionMarginSL9):
         overTimeSL9 = overTimeSL9 + 1

########################################################################################################################################

    dfIrregularitiesC9 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.821463) & (dfIrregularities['lapPosition'] <= 0.880807)]
    dfIrregularitiesC9 = dfIrregularitiesC9.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregC9 = dfIrregularitiesC9['timestamp'].iloc[0]
    exitValueIrregC9 = dfIrregularitiesC9['timestamp'].iloc[-1]
    timespentIrregC9 = exitValueIrregC9 - enterValueIrregC9

    # print(timespentIrregC1)

    sectionMarginC9 = (0.10 * 6.38) + 6.38
    

    if ((timespentIrregC9/1000 ) > sectionMarginC9):
         overTimeC9 = overTimeC9 + 1

########################################################################################################################################

    dfIrregularitiesSL10 = dfIrregularities[(dfIrregularities['lapPosition'] >= 0.880808) & (dfIrregularities['lapPosition'] <= 1)]
    dfIrregularitiesSL10 = dfIrregularitiesSL10.reset_index(drop=True)
    
    # print(dfIrregularitiesC1)

    enterValueIrregSL10 = dfIrregularitiesSL10['timestamp'].iloc[0]
    exitValueIrregSL10 = dfIrregularitiesSL10['timestamp'].iloc[-1]
    timespentIrregSL10 = exitValueIrregSL10 - enterValueIrregSL10

    # print(timespentIrregC1)

    sectionMarginSL10 = (0.10 * 9.24) + 9.24
    

    if ((timespentIrregC1/1000 ) > sectionMarginSL10):
         overTimeSL10 = overTimeSL10 + 1


    dfIrregularities = dfOmega
       


print(overTimeC1,overTimeSL2,overTimeC2,overTimeSL3 ,overTimeC3,overTimeSL4,overTimeC4,overTimeSL5,overTimeC5,overTimeSL6,overTimeC6,overTimeSL7 ,overTimeC7,overTimeSL8 ,overTimeC8,overTimeSL9,overTimeC9,overTimeSL10)

overtimeListTime = []
overtimeListTime.append(overTimeC1)
overtimeListTime.append(overTimeSL2)
overtimeListTime.append(overTimeC2)
overtimeListTime.append(overTimeSL3)
overtimeListTime.append(overTimeC3)
overtimeListTime.append(overTimeSL4)
overtimeListTime.append(overTimeC4)
overtimeListTime.append(overTimeSL5)
overtimeListTime.append(overTimeC5)
overtimeListTime.append(overTimeSL6)
overtimeListTime.append(overTimeC6)
overtimeListTime.append(overTimeSL7)
overtimeListTime.append(overTimeC7)
overtimeListTime.append(overTimeSL8)
overtimeListTime.append(overTimeC8)
overtimeListTime.append(overTimeSL9)
overtimeListTime.append(overTimeC9)
overtimeListTime.append(overTimeSL10)

overtimeSections = ["Corner 1", "StraightL 2" , "Corner 2" , "StrightL 3" , "Corner 3" , "StraightL 4" , "Corner 4", "StraightL 5" ,"Corner 5", "StraightL 6" , "Corner 6" , "StraightL 7" , "Corner 7", "StraightL 8" , "Corner 8" ,"StraightL 9" , "Corner 9" , "StraightL 10"]
dfOvertime = pd.DataFrame()

dfOvertime['Overtime'] = overtimeListTime
dfOvertime['Sections'] = overtimeSections
print(dfOvertime)

# Find Peaks
dfPeaks = dfOmega


# Find Gas Peaks
gasPeaks = dfPeaks['gas']
gasIndices = find_peaks(gasPeaks)[0]
gasPeaksNo = len(gasIndices)

# print(gasPeaksNo)

# Find Breaks Peaks
breakPeaks = dfPeaks['breaks']
breakIndices = find_peaks(breakPeaks)[0]
breakPeaksNo = len(breakIndices)

# print(breakPeaksNo)

# Find Steer Peaks
steerPeaks = dfPeaks['steer']
steerIndices = find_peaks(steerPeaks)[0]
steerPeaksNo = len(steerIndices)

# print(steerPeaksNo)

# Find optimal number of peaks

optimalGasPeeks = (61 * len(noLaps))*100
optimalBreakPeeks = (98 * len(noLaps))*100
optimalSteerPeeks = (289 * len(noLaps))*100

# Calculate Smoothness Performance
gasSmooth = optimalGasPeeks/gasPeaksNo
breakSmooth = optimalBreakPeeks/breakPeaksNo
steerSmooth = optimalSteerPeeks/steerPeaksNo

gasSmoothPerc = (str(gasSmooth))[:2]
breakSmoothPerc = (str(breakSmooth))[:2]
steerSmoothPerc = (str(steerSmooth))[:2]


lapsEx = list(set(exLapCount))
lapsEx.insert(0, 0)
print(lapsEx)
print(noLaps)

driverName = dfSession.iloc[0]['driver name']
print(driverName)
driverCar = dfSession.iloc[0]['car']

# Design the App layout
app.layout = dbc.Container([

    dbc.Row([
        html.P('------------', style = {'text-align': 'left', 'color' : '#202123'}),
        dbc.Col(html.H1("Sim Racing Dashboard", style = {'text-align': 'center', 'color' : 'white'}))
    ]),

    dbc.Row([
        dbc.Col(html.H4("____________________________________________________________________________________________________________________________________________________________", style = {'text-align': 'center', 'color' : '#FFBF00', 'padding-bottom': '20px'}))
    ]),

    dbc.Row([dbc.Col([
            html.H2("Session Info", style = {'text-align': 'left', 'color' : 'white'}),
            html.H3('------------', style = {'text-align': 'left', 'color' : '#202123'}),

            html.H4("Driver Name", style = {'text-align': 'left', 'color' : 'white'}),
            html.P(driverName, style = {'text-align': 'left', 'color' : 'white'}),
            html.P('------------', style = {'text-align': 'left', 'color' : '#202123'}),

            html.H4("Car", style = {'text-align': 'left', 'color' : 'white'}),
            html.P(driverCar, style = {'text-align': 'left', 'color' : 'white'}),
            html.P('------------', style = {'text-align': 'left', 'color' : '#202123'}),

            # html.H3("Best Lap", style = {'text-align': 'left', 'color' : 'white'}),
            # html.P(bestLap,  style = {'text-align': 'left', 'color' : 'white'}),
            # html.P('------------', style = {'text-align': 'left', 'color' : '#202123'}),

            # html.H3("Worst Lap", style = {'text-align': 'left', 'color' : 'white'}),
            # html.P(worstLap, style = {'text-align': 'left', 'color' : 'white'}),
            # html.P('------------', style = {'text-align': 'left', 'color' : '#202123'}),

            html.H4("DRS System", style = {'text-align': 'left', 'color' : 'white'}),
            html.P(drsBool, style = {'text-align': 'left', 'color' : 'white'}),
            html.P('------------', style = {'text-align': 'left', 'color' : '#202123'}),

            html.H4("Most Improved Lap", style = {'text-align': 'left', 'color' : 'white'}),
            html.P(mostImproved, style = {'text-align': 'left', 'color' : 'white'}),
            html.P('------------', style = {'text-align': 'left', 'color' : '#202123'}),
            
            html.H4("Times Out Of Track", style = {'text-align': 'left', 'color' : 'white'}),
            html.P(dfInvalidCount, style = {'text-align': 'left', 'color' : 'white'}),



        ], width={'size':2}),

        dbc.Col([
            html.H3("----------", style = {'text-align': 'left', 'color' : '#202123'}),
            html.H3("----------", style = {'text-align': 'left', 'color' : '#202123'}),

            html.H4("Map Name", style = {'text-align': 'left', 'color' : 'white'}),
            html.P(mapName, style = {'text-align': 'left', 'color' : 'white'}),
            html.P('------------', style = {'text-align': 'left', 'color' : '#202123'}),

            html.H4("Number of Laps", style = {'text-align': 'left', 'color' : 'white'}),
            html.P(numberLaps, style = {'text-align': 'left', 'color' : 'white'}),
            html.P('------------', style = {'text-align': 'left', 'color' : '#202123'}),

            # html.H3("Best Lap Time", style = {'text-align': 'left', 'color' : 'white'}),
            # html.P(bestLapMinutes, style = {'text-align': 'left', 'color' : 'white'}),

            # html.H3("Worst Lap Time", style = {'text-align': 'left', 'color' : 'white'}),
            # html.P(worstLapMinutes, style = {'text-align': 'left', 'color' : 'white'}),

            html.H4("Brake Bias", style = {'text-align': 'left', 'color' : 'white'}),
            html.P(brakeBiasFinal, style = {'text-align': 'left', 'color' : 'white'}),
            html.P('------------', style = {'text-align': 'left', 'color' : '#202123'}),

            html.H4("Most Improved Time", style = {'text-align': 'left', 'color' : 'white'}),
            html.P(mostImprovedMinutes, style = {'text-align': 'left', 'color' : 'white'}),
            html.P('------------', style = {'text-align': 'left', 'color' : '#202123'}),

            html.H4("Average Lap Time", style = {'text-align': 'left', 'color' : 'white'}),
            html.P(averageLapFixed, style = {'text-align': 'left', 'color' : 'white'}),


        ], width={'size':2}),
        
        
        dbc.Col([

            html.H3('------------', style = {'text-align': 'left', 'color' : '#202123'}),
            html.H4("Lap Ranking (Best to Worst)", style = {'text-align': 'center', 'color' : 'white'}),

            dash_table.DataTable(
                dfSessInfo.to_dict('records'), [{"name": i, "id": i} for i in dfSessInfo.columns], 
                style_cell={'textAlign': 'left'}, 
                style_header={'backgroundColor': 'rgb(30, 30, 30)',
                              'color': 'white'},
                style_data={'backgroundColor': 'rgb(50, 50, 50)',
                            'color': 'white'}
            ),


        ], width={'size':4}),


        dbc.Col([
                html.H3('------------', style = {'text-align': 'left', 'color' : '#202123'}),
                html.H4('Smoothness Factors', style = {'text-align': 'center', 'color' : 'white'}),
                dbc.Row([
                    dbc.Col([daq.LEDDisplay(
                                label={'label' : "Gas Pedal Smoothness  (%)", 'style' : {'color' : 'white'} },
                                labelPosition='bottom',
                                value= gasSmoothPerc,
                                color="#FFBF00",
                                backgroundColor="#111111",
                                size=40
                            )]),
                    dbc.Col([daq.LEDDisplay(
                                label={'label' : "Breaking Smoothness  (%)", 'style' : {'color' : 'white'} },
                                labelPosition='bottom',
                                value= breakSmoothPerc,
                                color="#FFBF00",
                                backgroundColor="#111111",
                                size=40
                            )]),
                    dbc.Col([daq.LEDDisplay(
                                label={'label' : "Steering Smoothness  (%)", 'style' : {'color' : 'white'} },
                                labelPosition='bottom',
                                value= steerSmoothPerc,
                                color="#FFBF00",
                                backgroundColor="#111111",
                                size=40
                            )])

                ]),
                html.H6('------------', style = {'text-align': 'left', 'color' : '#202123'}),
                dcc.Graph(figure={'data': [{'x': overtimeSections, 'y': overtimeListTime, 'type': 'bar', 'marker' : { "color" : '#FFBF00'}}],
                                          'layout': {'title': 'Number of Times over Optimal time for each Section', 'paper_bgcolor': '#111111', 'plot_bgcolor': '#111111','font':{
                                          'color': '#ffffff' # color (blue) of font
                                    },}}
                    )]),
           
        ]),

    dbc.Row([html.H3('------------', style = {'text-align': 'left', 'color' : '#202123'}),]),

    dbc.Row([
        dbc.Col(html.H4("__________________________________________________________________________________________________________________", style = {'text-align': 'center', 'color' : '#EA2AEA', 'padding-bottom': '20px'}))
    ]),

    dbc.Row([
        dbc.Col([
            html.H2("Lap Info", style = {'text-align': 'left', 'color' : 'white'}),
            html.H3('------------', style = {'text-align': 'left', 'color' : '#202123'}),
        
            dash_table.DataTable(
                id='table',
                # data=[],
                # columns=[{"name": i, "id": i} for i in dfSections.columns],
                # dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns], 
                style_cell={'textAlign': 'left'}, 
                style_header={'backgroundColor': 'rgb(30, 30, 30)',
                              'color': 'white'},
                style_data={'backgroundColor': 'rgb(50, 50, 50)',
                            'color': 'white'
                }
                ),

            ], width={'size':4}),


        dbc.Col([
       
            html.H3( "---------",style = {'text-align': 'center', 'color' : '#202123'}),
            html.H4( "Track Map ",style = {'text-align': 'center', 'color' : 'white'}),
            html.H6("Choose a Lap: ", style = {'color' : 'white'}),
            dcc.Dropdown(noLaps, id='my-Lapdropdown'),
            html.H3( "---------",style = {'text-align': 'center', 'color' : '#202123'}),
            dbc.Card([
            dbc.CardImg(
                src="assets\zandvoort col.jpg",
                bottom= True,
            )
        ], color="#202123")

        ], width={'size':4}),
        
        dbc.Col([
            html.H3( "---------",style = {'text-align': 'center', 'color' : '#202123'}),
            html.H4( "Tyre Temperature",style = {'text-align': 'center', 'color' : 'white'}),
            html.H3( "---------",style = {'text-align': 'center', 'color' : '#202123'}),
            dbc.Row([
                dbc.Col([
                    daq.Gauge(
                        id ="tyre1 gauge", 
                        min = 0, 
                        max = 105, 
                        value= 0, 
                        label = "Front Left Tyre",
                        style = {'text-align': 'center', 'color' : 'white'},
                        showCurrentValue=True,
                        units="°C",
                        labelPosition = 'bottom',
                        size = 180,
                        color={"gradient":False,"ranges":{"#FFBF00":[0,85], "green":[85,95],"red":[95,105]}}
                    )]),
                dbc.Col([
                    daq.Gauge(
                     id ="tyre2 gauge", 
                        min = 0, 
                        max = 105, 
                        value= 0, 
                        label = "Front Right Tyre",
                        style = {'text-align': 'center', 'color' : 'white'},
                        showCurrentValue=True,
                        units="°C",
                        labelPosition = 'bottom',
                        size = 180,
                        color={"gradient":False,"ranges":{"#FFBF00":[0,85],"green":[85,95],"red":[95,105]}}
                    )])
            ]),


            dbc.Row([html.H6('------------', style = {'text-align': 'left', 'color' : '#202123'}),
                    ]),
            

            dbc.Row([ dbc.Col([
                    daq.Gauge(
                     id ="tyre3 gauge", 
                        min = 0, 
                        max = 105, 
                        value= 0, 
                        label = "Back Left Tyre",
                        style = {'text-align': 'center', 'color' : 'white'},
                        showCurrentValue=True,
                        units="°C",
                        labelPosition = 'bottom',
                        size = 180,
                        color={"gradient":False,"ranges":{"#FFBF00":[0,85],"green":[85,95],"red":[95,105]}}
                    )]),
                dbc.Col([
                    daq.Gauge(
                     id ="tyre4 gauge", 
                        min = 0, 
                        max = 105, 
                        value= 0, 
                        label = "Back Right Tyre",
                        style = {'text-align': 'center', 'color' : 'white'},
                        showCurrentValue=True,
                        units="°C",
                        labelPosition = 'bottom',
                        size = 180,
                        color={"gradient":False,"ranges":{"#FFBF00":[0,85],"green":[85,95],"red":[95,105]}}
                    )])]),
        ], width={'size':4})
    ]),

    dbc.Row([

        dbc.Col([
            html.H6('------------', style = {'text-align': 'left', 'color' : '#202123'}),
            html.H6("Select the Straight Line or Corner: ", style = {'color' : 'white'}),
            dcc.Dropdown(["Straight Line 1", "Corner 1","Straight Line 2", "Corner 2", "Straight Line 3", "Corner 3", "Straight Line 4", "Corner 4", "Straight Line 5", "Corner 5", "Straight Line 6", "Corner 6", "Straight Line 7", "Corner 7", "Straight Line 8", "Corner 8", "Straight Line 9", "Corner 9", "Straight Line 10"], id='my-dropdown'),
        ], width={'size':8}),

        dbc.Col([
            html.H6('------------', style = {'text-align': 'left', 'color' : '#202123'}),
            html.H6("Select a Lap to Compare: ", style = {'color' : 'white'}),
            dcc.Dropdown(lapsEx, id='my-Refdropdown'),

        ], width={'size':4})
            ]),
    
    dbc.Row([html.P('Drivers Name', style = {'text-align': 'left', 'color' : '#202123'})]),


    dbc.Row([
        dbc.Col([
            dcc.Graph(id='graph-outputGas', figure={}),
        ], width={'size':4}),

        dbc.Col([
            dcc.Graph(id='graph-outputBreaks', figure={}),    
        
        ], width={'size':4}),

        dbc.Col([
            dcc.Graph(id='graph-outputSteer', figure={}),        
        ], width={'size':4})

    ]),

    dbc.Row([html.P('Drivers Name', style = {'text-align': 'left', 'color' : '#202123'})]),

    dbc.Row([
        dbc.Col([
            dcc.Graph(id='graph-outputSpeed', figure={}),
        ], width={'size':4}),

        dbc.Col([
            dcc.Graph(id='graph-outputFrontTyres', figure={}),    
        
        ], width={'size':4}),

        dbc.Col([
            dcc.Graph(id='graph-outputBackTyres', figure={}),        
        ], width={'size':4})

    ])


], fluid= True, style={'backgroundColor':'#202123' })


# testime = dfOmega.loc[dfOmega['lapCount'] == 2]
# print(testime)


# style={'backgroundColor':'#202326'}
# app.layout = html.Div([   
#     html.H1("Sim Racing Dashboard", style = {'text-align': 'center'}),  
#     html.H2("Best Lap time", style = {'text-align': 'left'}),
#     html.H3(dfBestLap, style = {'text-align': 'left'}),
# dcc.Graph(figure=figGas),
# dcc.Graph(figure=figBrake),
# dcc.Graph(figure=figSteer),
# ])

# Ti je 
# Gas Pedal Graph
@app.callback(
    Output(component_id='graph-outputGas', component_property='figure'),
    Input(component_id='my-dropdown', component_property='value'),
    Input(component_id='my-Lapdropdown', component_property='value'),
    Input(component_id='my-Refdropdown', component_property='value')
)

def update_my_graphs(val_chosen, lap_chosen, ref_chosen):

        if lap_chosen == 1:
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]


                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas


            elif val_chosen == "Corner 1":
                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas
            
            elif val_chosen == "Straight Line 2":

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

            elif val_chosen == "Corner 2":

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


            elif val_chosen == "Corner 3":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

            elif val_chosen == "Straight Line 4":

        
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

            elif val_chosen == "Corner 4":

                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

            elif val_chosen == "Straight Line 5":

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

            elif val_chosen == "Corner 5":

                

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

            elif val_chosen == "Straight Line 6":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

            elif val_chosen == "Corner 6":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

            elif val_chosen == "Straight Line 7":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


            elif val_chosen == "Corner 7":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

            elif val_chosen == "Straight Line 8":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

            elif val_chosen == "Corner 8":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

            elif val_chosen == "Straight Line 9":

                

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

            elif val_chosen == "Corner 9":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

            elif val_chosen == "Straight Line 10":

                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['gas'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 2:
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate


        if lap_chosen == 3 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 4 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 5 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 6 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 7 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 8 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 9 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 10 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 11 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 12 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 13 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 14 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 15 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 16 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 17 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 18 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate

        if lap_chosen == 19 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate
        

        if lap_chosen == 20 :
            if val_chosen == "Straight Line 1" :
                # print(n)
                # print(f"value user chose: {val_chosen}")
                # print(type(val_chosen))
                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 1":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            
            elif val_chosen == "Straight Line 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 2":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 3":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 4":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 5":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 6":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 7":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 8":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Corner 9":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas

            elif val_chosen == "Straight Line 10":

                dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
                dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                figGas = px.line(dffSigma, x='lapPosition', y='gas', title = "Gas Pedal Usage")
                figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Gas Pedal")
                figGas.update_traces(line_color='#FFBF00')
                return figGas
            else:
                raise dash.exceptions.PreventUpdate


        else:
            raise dash.exceptions.PreventUpdate
            


# Break Pedal Graph
@app.callback(
    Output(component_id='graph-outputBreaks', component_property='figure'),
    Input(component_id='my-dropdown', component_property='value'),
    Input(component_id='my-Lapdropdown', component_property='value'),
    Input(component_id='my-Refdropdown', component_property='value')
)

def update_my_graphs(val_chosen, lap_chosen, ref_chosen):

    if lap_chosen == 1 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Braking Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":
                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Braking Pedal Usage (blue line)")
                    figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figBrake.update_traces(line_color='#FFBF00')
                    return figBrake


                else:
                    # dffOmega = dfOmega.iloc[130691:137582]

                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Braking Pedal Usage (blue line)")
                    figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figBrake.update_traces(line_color='#FFBF00')
                    return figBrake
            
        elif val_chosen == "Straight Line 2":

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 2":

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                

        elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


        elif val_chosen == "Corner 3":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 4":

        
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 4":

                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 5":

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 5":

                

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 6":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 6":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 7":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


        elif val_chosen == "Corner 7":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 8":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 8":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 9":

                

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 9":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 10":

                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['breaks'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    figGas = px.line(dffSigma, x='lapPosition', y='breaks', title = "Breaking Pedal Usage")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 2 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 3 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 4 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 5 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 6 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 7 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 8 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 9 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 10 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 11 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 12 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 13 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 14 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 15 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 16 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 17 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 18 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 19 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 20 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBrake = px.line(dffSigma, x='lapPosition', y='breaks', title = "Brake Pedal Usage")
            figBrake.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Breaking Pedal")
            figBrake.update_traces(line_color='#FFBF00')
            return figBrake
        else:
            raise dash.exceptions.PreventUpdate


    else:
            raise dash.exceptions.PreventUpdate


# Steering Graph
@app.callback(
    Output(component_id='graph-outputSteer', component_property='figure'),
    Input(component_id='my-dropdown', component_property='value'),
    Input(component_id='my-Lapdropdown', component_property='value'),
    Input(component_id='my-Refdropdown', component_property='value')
)

def update_my_graphs(val_chosen, lap_chosen, ref_chosen):

    if lap_chosen == 1 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":
                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
                    figSteer.update_traces(line_color='#FFBF00')
                    return figSteer


                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
                    figSteer.update_traces(line_color='#FFBF00')
                    return figSteer
            
        elif val_chosen == "Straight Line 2":

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 2":

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                

        elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


        elif val_chosen == "Corner 3":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 4":

        
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 4":

                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 5":

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 5":

                

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 6":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 6":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 7":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


        elif val_chosen == "Corner 7":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 8":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 8":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 9":

                

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 9":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 10":

                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['steer'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    figGas = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Angle")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 2 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 3 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 4 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 5 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 6 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 7 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 8 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 9 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 10 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 11 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 12 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 13 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 14 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 15 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 16 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 17 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 18 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 19 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 20 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSteer = px.line(dffSigma, x='lapPosition', y='steer', title = "Steering Angle")
            figSteer.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Steering Wheel Angle")
            figSteer.update_traces(line_color='#FFBF00')
            return figSteer
        else:
            raise dash.exceptions.PreventUpdate


    else:
            raise dash.exceptions.PreventUpdate



# Car Speed Graph
@app.callback(
    Output(component_id='graph-outputSpeed', component_property='figure'),
    Input(component_id='my-dropdown', component_property='value'),
    Input(component_id='my-Lapdropdown', component_property='value'),
    Input(component_id='my-Refdropdown', component_property='value')
)

def update_my_graphs(val_chosen, lap_chosen, ref_chosen):

    if lap_chosen == 1 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":
                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.053934) & (dffOmegaRef['lapPosition'] <= 0.099476)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
                    figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figSpeed.update_traces(line_color='#FFBF00')
                    return figSpeed


                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
                    figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
                    figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figSpeed.update_traces(line_color='#FFBF00')
                    return figSpeed
            
        elif val_chosen == "Straight Line 2":

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.099557) & (dffOmegaRef['lapPosition'] <= 0.165263)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 2":

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.165264) & (dffOmegaRef['lapPosition'] <= 0.181269)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                

        elif val_chosen == "Straight Line 3":

                # dffOmega = dfOmega.iloc[130691:137582]
                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.181424) & (dffOmegaRef['lapPosition'] <= 0.197899)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


        elif val_chosen == "Corner 3":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.19798) & (dffOmegaRef['lapPosition'] <= 0.215193)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 4":

        
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.215288) & (dffOmegaRef['lapPosition'] <= 0.374019)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 4":

                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.374277) & (dffOmegaRef['lapPosition'] <= 0.430125)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 5":

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.430126) & (dffOmegaRef['lapPosition'] <= 0.476735)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 5":

                

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.476736) & (dffOmegaRef['lapPosition'] <= 0.493043)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 6":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.493161) & (dffOmegaRef['lapPosition'] <= 0.531574)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 6":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.531771) & (dffOmegaRef['lapPosition'] <= 0.568971)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 7":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.568972) & (dffOmegaRef['lapPosition'] <= 0.588932)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas


        elif val_chosen == "Corner 7":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.589097) & (dffOmegaRef['lapPosition'] <= 0.596377)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 8":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.59651) & (dffOmegaRef['lapPosition'] <= 0.713457)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 8":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.713617) & (dffOmegaRef['lapPosition'] <= 0.777000)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 9":

                

                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.777001) & (dffOmegaRef['lapPosition'] <= 0.82126)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Corner 9":


                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.821463) & (dffOmegaRef['lapPosition'] <= 0.880807)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

        elif val_chosen == "Straight Line 10":

                
                if ref_chosen == 2 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 2]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 3 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 3]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 4 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 4]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 5 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 5]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 6 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 6]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 7 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 7]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 8 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 8]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 9 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 9]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 10 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 10]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 11 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 11]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 12 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 12]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 13 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 13]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 14 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 14]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 15 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 15]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 16 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 16]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 17 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 17]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 18 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 18]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    374277
                    return figGas

                if ref_chosen == 19 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 19]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 20 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffOmegaRef = dfOmega.loc[dfOmega['lapCount'] == 20]

                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    dffSigmaRef = dffOmegaRef[(dffOmegaRef['lapPosition'] >= 0.880808) & (dffOmegaRef['lapPosition'] <= 1)]

                    
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed (blue line)")
                    figGas.add_scatter(x=dffSigmaRef['lapPosition'], y=dffSigmaRef['speed'])
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    # figGas.update_traces(line_color='#FFBF00')
                    
                    return figGas

                if ref_chosen == 0 :
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas

                else:
                    # dffOmega = dfOmega.iloc[130691:137582]
                    dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1]
                    dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
                    figGas = px.line(dffSigma, x='lapPosition', y='speed', title = "Steering Angle")
                    figGas.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
                    figGas.update_traces(line_color='#FFBF00')
                    return figGas
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 2 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 3 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 4 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 5 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 6 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 7 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 8 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 9 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 10 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 11 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 12 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 13 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 14 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 15 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 16 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 17 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 18 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 19 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 20 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ] 
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figSpeed = px.line(dffSigma, x='lapPosition', y='speed', title = "Speed")
            figSpeed.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Speed")
            figSpeed.update_traces(line_color='#FFBF00')
            return figSpeed
        else:
            raise dash.exceptions.PreventUpdate


    else:
            raise dash.exceptions.PreventUpdate


#Front Tyres Slip Angle
@app.callback(
    Output(component_id='graph-outputFrontTyres', component_property='figure'),
    Input(component_id='my-dropdown', component_property='value'),
    Input(component_id='my-Lapdropdown', component_property='value')
)

def update_my_graphs(val_chosen, lap_chosen):
    
    if lap_chosen == 1 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 2 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 4 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 3 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 5 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 6 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 7 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 8 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 9 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 10 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 11 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 12 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 13 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 14 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 15 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 16 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 17 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 18 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 19 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 20 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            # figFrontTyres.update_traces(line_color=['#FFBF00'])
            return figFrontTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figFrontTyres = px.line(dffSigma, x='lapPosition',  y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figFrontTyres = px.line(dffSigma, x='lapPosition', y=['tyre1', 'tyre2'], title = "Front Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figFrontTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Front Tyres Slip Angle")
            return figFrontTyres
        else:
            raise dash.exceptions.PreventUpdate


    else:
            raise dash.exceptions.PreventUpdate



@app.callback(
    Output(component_id='graph-outputBackTyres', component_property='figure'),
    Input(component_id='my-dropdown', component_property='value'),
    Input(component_id='my-Lapdropdown', component_property='value')
)

def update_my_graphs(val_chosen, lap_chosen):

    if lap_chosen == 1 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 2 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 3 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 4 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate
    if lap_chosen == 5 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 6 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 7 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 8 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 9 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 10 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 11 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 12 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 13 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 14 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 15 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 16 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 17 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 18 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 19 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 20 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.400125)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            figBackTyres = px.line(dffSigma, x='lapPosition',  y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            figBackTyres = px.line(dffSigma, x='lapPosition', y=['tyre3', 'tyre4'], title = "Back Tyres Slip Angle", color_discrete_sequence=["#FFBF00", "#EA2AEA"])
            figBackTyres.update_layout(template='plotly_dark', xaxis_title="Lap Position", yaxis_title="Back Tyres Slip Angle")
            return figBackTyres
        else:
            raise dash.exceptions.PreventUpdate


    else:
            raise dash.exceptions.PreventUpdate




@app.callback(
    Output("tyre1 gauge", "value"),
    Input(component_id='my-dropdown', component_property='value'),
    Input(component_id='my-Lapdropdown', component_property='value')
)

def update_my_graphs(val_chosen, lap_chosen):

    if lap_chosen == 1 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate
    
    if lap_chosen == 2 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 3 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 4 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 5 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 6 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 7 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 8 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 9 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 10 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 11 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 12 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 13 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 14 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 15 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 16 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 17 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 18 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 19 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 20 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp1"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate


    else:
            raise dash.exceptions.PreventUpdate




@app.callback(
    Output("tyre2 gauge", "value"),
    Input(component_id='my-dropdown', component_property='value'),
    Input(component_id='my-Lapdropdown', component_property='value')
)

def update_my_graphs(val_chosen, lap_chosen):

    if lap_chosen == 1 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 2 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 3 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 4 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 5 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 6 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 7 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 8 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 9 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 10 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 11 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 12 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 13 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 14 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 15 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 16 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 17 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 18 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 19 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 20 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp2"].mean()
            return dffSigmaTemp
        
        else:
            raise dash.exceptions.PreventUpdate


    else:
        raise dash.exceptions.PreventUpdate




@app.callback(
    Output("tyre3 gauge", "value"),
    Input(component_id='my-dropdown', component_property='value'),
    Input(component_id='my-Lapdropdown', component_property='value')
)

def update_my_graphs(val_chosen, lap_chosen):

    if lap_chosen == 1 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 2 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 3 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 4 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 5 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 6 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 7 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 8 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 9 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 10 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 11 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 12 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 13 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 14 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 15 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 16 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 17 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 18 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 19 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 20 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp3"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate


    else:
            raise dash.exceptions.PreventUpdate



@app.callback(
    Output("tyre4 gauge", "value"),
    Input(component_id='my-dropdown', component_property='value'),
    Input(component_id='my-Lapdropdown', component_property='value')
)

def update_my_graphs(val_chosen, lap_chosen):

    if lap_chosen == 1 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 2 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 3 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 4 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 5 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 6 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 7 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 8 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 9 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 10 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 10 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 11 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 12 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 13 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 14 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 15 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 16 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 17 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 18 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 19 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    if lap_chosen == 20 :
        if val_chosen == "Straight Line 1":
            # print(n)
            # print(f"value user chose: {val_chosen}")
            # print(type(val_chosen))
            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0) & (dffOmega['lapPosition'] <= 0.053648)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 1":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.053934) & (dffOmega['lapPosition'] <= 0.099476)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        
        elif val_chosen == "Straight Line 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.099557) & (dffOmega['lapPosition'] <= 0.165263)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 2":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.165264) & (dffOmega['lapPosition'] <= 0.181269)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.181424) & (dffOmega['lapPosition'] <= 0.197899)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 3":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.19798) & (dffOmega['lapPosition'] <= 0.215193)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.215288) & (dffOmega['lapPosition'] <= 0.374019)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 4":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.374277) & (dffOmega['lapPosition'] <= 0.430125)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.430126) & (dffOmega['lapPosition'] <= 0.476735)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 5":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.476736) & (dffOmega['lapPosition'] <= 0.493043)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.493161) & (dffOmega['lapPosition'] <= 0.531574)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 6":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.531771) & (dffOmega['lapPosition'] <= 0.568971)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.568972) & (dffOmega['lapPosition'] <= 0.588932)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 7":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.589097) & (dffOmega['lapPosition'] <= 0.596377)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.59651) & (dffOmega['lapPosition'] <= 0.713457)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 8":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.713617) & (dffOmega['lapPosition'] <= 0.777000)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.777001) & (dffOmega['lapPosition'] <= 0.82126)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Corner 9":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.821463) & (dffOmega['lapPosition'] <= 0.880807)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp

        elif val_chosen == "Straight Line 10":

            dffOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]
            dffSigma = dffOmega[(dffOmega['lapPosition'] >= 0.880808) & (dffOmega['lapPosition'] <= 1)]
            dffSigmaTemp = dffSigma["tyretemp4"].mean()
            return dffSigmaTemp
        else:
            raise dash.exceptions.PreventUpdate

    else:
            raise dash.exceptions.PreventUpdate


@app.callback(
    [Output("table", "data"),Output('table', 'columns')],
    [Input(component_id='my-Lapdropdown', component_property='value')]
)

def updateTable(lap_chosen):
    
    if lap_chosen == 1 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 1 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]


    elif lap_chosen == 2 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 2 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 3 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 4 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 4 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]


    elif lap_chosen == 5 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 5 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 6 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 6 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 7 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 7 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 8 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 8 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 9 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 9 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 10 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 3 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 11 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 11 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 12 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 12 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 13 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 13 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 14 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 14 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 15 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 15 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 16 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 16 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 17 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 17 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 18 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 18 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 19 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 19 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    elif lap_chosen == 20 : 
        [dffSections, columns] = dfSections.to_dict('records'), [{"name": i, "id": i} for i in dfSections.columns]
        # print(dffSections)

        dfTableOmega = dfOmega.loc[dfOmega['lapCount'] == 20 ]


        dfTableSL1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0) & (dfTableOmega['lapPosition'] <= 0.053648)]
        dfTableSL1 = dfTableSL1.reset_index(drop=True)

        dffSections[0]['Your Time'] = 3

        ###############################################################################################################

        dfTableC1 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.053934) & (dfTableOmega['lapPosition'] <= 0.099476)]
        dfTableC1 = dfTableC1.reset_index(drop=True)
        

        enterValueC1 = dfTableC1['timestamp'].iloc[0]
        exitValueC1 = dfTableC1['timestamp'].iloc[-1]
        timespentC1 = exitValueC1 - enterValueC1

        dffSections[1]['Your Time'] = timespentC1/1000

        ################################################################################################################

        dfTableSL2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.099557) & (dfTableOmega['lapPosition'] <= 0.165263)]
        dfTableSL2 = dfTableSL2.reset_index(drop=True)
        

        enterValueSL2 = dfTableSL2['timestamp'].iloc[0]
        exitValueSL2 = dfTableSL2['timestamp'].iloc[-1]
        timespentSL2 = exitValueSL2 - enterValueSL2

        dffSections[2]['Your Time'] = timespentSL2/1000

        ################################################################################################################

        dfTableC2 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.165264) & (dfTableOmega['lapPosition'] <= 0.181269)]
        dfTableC2 = dfTableC2.reset_index(drop=True)
        

        enterValueC2 = dfTableC2['timestamp'].iloc[0]
        exitValueC2 = dfTableC2['timestamp'].iloc[-1]
        timespentC2 = exitValueC2 - enterValueC2

        dffSections[3]['Your Time'] = timespentC2/1000

        ################################################################################################################

        dfTableSL3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.181424) & (dfTableOmega['lapPosition'] <= 0.197899)]
        dfTableSL3 = dfTableSL3.reset_index(drop=True)
        

        enterValueSL3 = dfTableSL3['timestamp'].iloc[0]
        exitValueSL3 = dfTableSL3['timestamp'].iloc[-1]
        timespentSL3 = exitValueSL3 - enterValueSL3

        dffSections[4]['Your Time'] = timespentSL3/1000

        ################################################################################################################

        dfTableC3 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.19798) & (dfTableOmega['lapPosition'] <= 0.215193)]
        dfTableC3 = dfTableC3.reset_index(drop=True)
        

        enterValueC3 = dfTableC3['timestamp'].iloc[0]
        exitValueC3 = dfTableC3['timestamp'].iloc[-1]
        timespentC3 = exitValueC3 - enterValueC3

        dffSections[5]['Your Time'] = timespentC3/1000

        ################################################################################################################

        dfTableSL4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.215288) & (dfTableOmega['lapPosition'] <= 0.374019)]
        dfTableSL4 = dfTableSL4.reset_index(drop=True)
        

        enterValueSL4 = dfTableSL4['timestamp'].iloc[0]
        exitValueSL4 = dfTableSL4['timestamp'].iloc[-1]
        timespentSL4 = exitValueSL4 - enterValueSL4

        dffSections[6]['Your Time'] = timespentSL4/1000

        ################################################################################################################

        dfTableC4 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.374277) & (dfTableOmega['lapPosition'] <= 0.430125)]
        dfTableC4 = dfTableC4.reset_index(drop=True)
        

        enterValueC4 = dfTableC4['timestamp'].iloc[0]
        exitValueC4 = dfTableC4['timestamp'].iloc[-1]
        timespentC4 = exitValueC4 - enterValueC4

        dffSections[7]['Your Time'] = timespentC4/1000

        ################################################################################################################

        dfTableSL5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.430126) & (dfTableOmega['lapPosition'] <= 0.476735)]
        dfTableSL5 = dfTableSL5.reset_index(drop=True)
        

        enterValueSL5 = dfTableSL5['timestamp'].iloc[0]
        exitValueSL5 = dfTableSL5['timestamp'].iloc[-1]
        timespentSL5 = exitValueSL5 - enterValueSL5

        dffSections[8]['Your Time'] = timespentSL5/1000

        ################################################################################################################
        
        dfTableC5 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.476736) & (dfTableOmega['lapPosition'] <= 0.493043)]
        dfTableC5 = dfTableC5.reset_index(drop=True)
        

        enterValueC5 = dfTableC5['timestamp'].iloc[0]
        exitValueC5 = dfTableC5['timestamp'].iloc[-1]
        timespentC5 = exitValueC5 - enterValueC5

        dffSections[9]['Your Time'] = timespentC5/1000

        ################################################################################################################

        dfTableSL6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.493161) & (dfTableOmega['lapPosition'] <= 0.531574)]
        dfTableSL6 = dfTableSL6.reset_index(drop=True)
        

        enterValueSL6 = dfTableSL6['timestamp'].iloc[0]
        exitValueSL6 = dfTableSL6['timestamp'].iloc[-1]
        timespentSL6 = exitValueSL6 - enterValueSL6

        dffSections[10]['Your Time'] = timespentSL6/1000

        ################################################################################################################

        dfTableC6 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.531771) & (dfTableOmega['lapPosition'] <= 0.568971)]
        dfTableC6 = dfTableC6.reset_index(drop=True)
        

        enterValueC6 = dfTableC6['timestamp'].iloc[0]
        exitValueC6 = dfTableC6['timestamp'].iloc[-1]
        timespentC6 = exitValueC6 - enterValueC6

        dffSections[11]['Your Time'] = timespentC6/1000

        ################################################################################################################

        dfTableSL7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.568972) & (dfTableOmega['lapPosition'] <= 0.588932)]
        dfTableSL7 = dfTableSL7.reset_index(drop=True)
        

        enterValueSL7 = dfTableSL7['timestamp'].iloc[0]
        exitValueSL7 = dfTableSL7['timestamp'].iloc[-1]
        timespentSL7 = exitValueSL7 - enterValueSL7

        dffSections[12]['Your Time'] = timespentSL7/1000

        ################################################################################################################

        dfTableC7 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.589097) & (dfTableOmega['lapPosition'] <= 0.596377)]
        dfTableC7 = dfTableC7.reset_index(drop=True)
        

        enterValueC7 = dfTableC7['timestamp'].iloc[0]
        exitValueC7 = dfTableC7['timestamp'].iloc[-1]
        timespentC7 = exitValueC7 - enterValueC7

        dffSections[13]['Your Time'] = timespentC7/1000

        ################################################################################################################

        dfTableSL8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.59651) & (dfTableOmega['lapPosition'] <= 0.713457)]
        dfTableSL8 = dfTableSL8.reset_index(drop=True)
        

        enterValueSL8 = dfTableSL8['timestamp'].iloc[0]
        exitValueSL8 = dfTableSL8['timestamp'].iloc[-1]
        timespentSL8 = exitValueSL8 - enterValueSL8

        dffSections[14]['Your Time'] = timespentSL8/1000

        ################################################################################################################

        dfTableC8 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.713617) & (dfTableOmega['lapPosition'] <= 0.777000)]
        dfTableC8 = dfTableC8.reset_index(drop=True)
        

        enterValueC8 = dfTableC8['timestamp'].iloc[0]
        exitValueC8 = dfTableC8['timestamp'].iloc[-1]
        timespentC8 = exitValueC8 - enterValueC8

        dffSections[15]['Your Time'] = timespentC8/1000

        ################################################################################################################

        dfTableSL9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.777001) & (dfTableOmega['lapPosition'] <= 0.82126)]
        dfTableSL9 = dfTableSL9.reset_index(drop=True)
        

        enterValueSL9 = dfTableSL9['timestamp'].iloc[0]
        exitValueSL9 = dfTableSL9['timestamp'].iloc[-1]
        timespentSL9 = exitValueSL9 - enterValueSL9

        dffSections[16]['Your Time'] = timespentSL9/1000

        ################################################################################################################

        dfTableC9 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.821463) & (dfTableOmega['lapPosition'] <= 0.880807)]
        dfTableC9 = dfTableC9.reset_index(drop=True)
        

        enterValueC9 = dfTableC9['timestamp'].iloc[0]
        exitValueC9 = dfTableC9['timestamp'].iloc[-1]
        timespentC9 = exitValueC9 - enterValueC9

        dffSections[17]['Your Time'] = timespentC9/1000

        ################################################################################################################

        dfTableSL10 = dfTableOmega[(dfTableOmega['lapPosition'] >= 0.880808) & (dfTableOmega['lapPosition'] <= 1)]
        dfTableSL10 = dfTableSL10.reset_index(drop=True)
        

        enterValueSL10 = dfTableSL10['timestamp'].iloc[0]
        exitValueSL10 = dfTableSL10['timestamp'].iloc[-1]
        timespentSL10 = exitValueSL10 - enterValueSL10

        dffSections[18]['Your Time'] = timespentSL10/1000

        ################################################################################################################

        return [dffSections, columns]

    else:
            raise dash.exceptions.PreventUpdate
# Run the App


app.run_server(debug = True)